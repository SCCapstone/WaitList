{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-password/email_templates.js","meteor://ðŸ’»app/packages/accounts-password/password_server.js"],"names":["greet","welcomeMsg","user","url","greeting","profile","name","Accounts","emailTemplates","from","siteName","Meteor","absoluteUrl","replace","resetPassword","subject","text","verifyEmail","enrollAccount","bcrypt","NpmModuleBcrypt","bcryptHash","wrapAsync","hash","bcryptCompare","compare","_bcryptRounds","getPasswordString","password","SHA256","algorithm","Error","digest","hashPassword","_checkPassword","result","userId","_id","services","error","checkPassword","_findUserByQuery","query","id","users","findOne","fieldName","fieldValue","username","email","selector","selectorForFastCaseInsensitiveLookup","candidateUsers","find","fetch","length","findUserByUsername","findUserByEmail","string","prefix","substring","Math","min","orClause","_","map","generateCasePermutationsForString","prefixPermutation","RegExp","_escapeRegExp","caseInsensitiveClause","$and","$or","permutations","i","ch","charAt","flatten","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase","checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","has","_skipCaseInsensitiveChecksForTest","matchedUsers","NonEmptyString","Match","Where","x","check","String","userQueryValidator","Optional","keys","passwordValidator","OneOf","registerLoginHandler","options","srp","undefined","verifier","newVerifier","SRP","generateVerifier","identity","salt","EJSON","stringify","format","v1","v2","hashedIdentityAndPassword","salted","update","$unset","$set","setUsername","newUsername","oldUsername","ex","methods","changePassword","oldPassword","newPassword","hashed","currentToken","_getLoginToken","connection","$pull","hashedToken","$ne","passwordChanged","setPassword","newPlaintextPassword","extend","logout","forgotPassword","emails","pluck","caseSensitiveEmail","sendResetPasswordEmail","address","contains","token","Random","secret","when","Date","tokenRecord","reason","_ensure","reset","resetPasswordUrl","urls","to","html","headers","Email","send","sendEnrollmentEmail","enrollAccountUrl","self","_loginMethod","arguments","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","_getPasswordEnrollTokenLifetimeMs","currentTimeMs","now","include","oldToken","_setLoginToken","resetToOldToken","affectedRecords","err","_clearAllLoginTokens","sendVerificationEmail","e","verified","$push","verificationTokens","push","verifyEmailUrl","t","emailsRecord","addEmail","newEmail","Boolean","isUndefined","caseInsensitiveRegExp","didUpdateOwnEmail","any","index","test","$addToSet","removeEmail","createUser","ObjectIncluding","insertUserDoc","remove","Object","_options","forbidClientAccountCreation","callback","clone","_ensureIndex","unique","sparse"],"mappings":"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","file":"/packages/accounts-password.js","sourcesContent":["function greet(welcomeMsg) {\n  return function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return `${greeting}\n\n${welcomeMsg}, simply click the link below.\n\n${url}\n\nThanks.\n`;\n  };\n}\n\n/**\n * @summary Options to customize emails sent from the Accounts system.\n * @locus Server\n * @importFromPackage accounts-base\n */\nAccounts.emailTemplates = {\n  from: \"Meteor Accounts <no-reply@meteor.com>\",\n  siteName: Meteor.absoluteUrl().replace(/^https?:\\/\\//, '').replace(/\\/$/, ''),\n\n  resetPassword: {\n    subject: function(user) {\n      return \"How to reset your password on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To reset your password\")\n  },\n  verifyEmail: {\n    subject: function(user) {\n      return \"How to verify email address on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To verify your account email\")\n  },\n  enrollAccount: {\n    subject: function(user) {\n      return \"An account has been created for you on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To start using the service\")\n  }\n};\n","/// BCRYPT\n\nvar bcrypt = NpmModuleBcrypt;\nvar bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nvar bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords (unless they have a 'services.password.srp'\n// field, in which case they will be upgraded to bcrypt the next time\n// they log in).\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nvar getPasswordString = function (password) {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nvar hashPassword = function (password) {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds);\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\nAccounts._checkPassword = function (user, password) {\n  var result = {\n    userId: user._id\n  };\n\n  password = getPasswordString(password);\n\n  if (! bcryptCompare(password, user.services.password.bcrypt)) {\n    result.error = new Meteor.Error(403, \"Incorrect password\");\n  }\n\n  return result;\n};\nvar checkPassword = Accounts._checkPassword;\n\n///\n/// LOGIN\n///\n\nAccounts._findUserByQuery = function (query) {\n  var user = null;\n\n  if (query.id) {\n    user = Meteor.users.findOne({ _id: query.id });\n  } else {\n    var fieldName;\n    var fieldValue;\n    if (query.username) {\n      fieldName = 'username';\n      fieldValue = query.username;\n    } else if (query.email) {\n      fieldName = 'emails.address';\n      fieldValue = query.email;\n    } else {\n      throw new Error(\"shouldn't happen (validation missed something)\");\n    }\n    var selector = {};\n    selector[fieldName] = fieldValue;\n    user = Meteor.users.findOne(selector);\n    // If user is not found, try a case insensitive lookup\n    if (!user) {\n      selector = selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n      var candidateUsers = Meteor.users.find(selector).fetch();\n      // No match if multiple candidates are found\n      if (candidateUsers.length === 1) {\n        user = candidateUsers[0];\n      }\n    }\n  }\n\n  return user;\n};\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername = function (username) {\n  return Accounts._findUserByQuery({\n    username: username\n  });\n};\n\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail = function (email) {\n  return Accounts._findUserByQuery({\n    email: email\n  });\n};\n\n// Generates a MongoDB selector that can be used to perform a fast case\n// insensitive lookup for the given fieldName and string. Since MongoDB does\n// not support case insensitive indexes, and case insensitive regex queries\n// are slow, we construct a set of prefix selectors for all permutations of\n// the first 4 characters ourselves. We first attempt to matching against\n// these, and because 'prefix expression' regex queries do use indexes (see\n// http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n// this has been found to greatly improve performance (from 1200ms to 5ms in a\n// test with 1.000.000 users).\nvar selectorForFastCaseInsensitiveLookup = function (fieldName, string) {\n  // Performance seems to improve up to 4 prefix characters\n  var prefix = string.substring(0, Math.min(string.length, 4));\n  var orClause = _.map(generateCasePermutationsForString(prefix),\n    function (prefixPermutation) {\n      var selector = {};\n      selector[fieldName] =\n        new RegExp('^' + Meteor._escapeRegExp(prefixPermutation));\n      return selector;\n    });\n  var caseInsensitiveClause = {};\n  caseInsensitiveClause[fieldName] =\n    new RegExp('^' + Meteor._escapeRegExp(string) + '$', 'i')\n  return {$and: [{$or: orClause}, caseInsensitiveClause]};\n}\n\n// Generates permutations of all case variations of a given string.\nvar generateCasePermutationsForString = function (string) {\n  var permutations = [''];\n  for (var i = 0; i < string.length; i++) {\n    var ch = string.charAt(i);\n    permutations = _.flatten(_.map(permutations, function (prefix) {\n      var lowerCaseChar = ch.toLowerCase();\n      var upperCaseChar = ch.toUpperCase();\n      // Don't add unneccesary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n  return permutations;\n}\n\nvar checkForCaseInsensitiveDuplicates = function (fieldName, displayName, fieldValue, ownUserId) {\n  // Some tests need the ability to add users with the same case insensitive\n  // value, hence the _skipCaseInsensitiveChecksForTest check\n  var skipCheck = _.has(Accounts._skipCaseInsensitiveChecksForTest, fieldValue);\n\n  if (fieldValue && !skipCheck) {\n    var matchedUsers = Meteor.users.find(\n      selectorForFastCaseInsensitiveLookup(fieldName, fieldValue)).fetch();\n\n    if (matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n        // Otherwise, check to see if there are multiple matches or a match\n        // that is not us\n        (matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId))) {\n      throw new Meteor.Error(403, displayName + \" already exists.\");\n    }\n  }\n};\n\n// XXX maybe this belongs in the check package\nvar NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\n\nvar userQueryValidator = Match.Where(function (user) {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (_.keys(user).length !== 1)\n    throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\n\nvar passwordValidator = Match.OneOf(\n  String,\n  { digest: String, algorithm: String }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (! options.password || options.srp)\n    return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    password: passwordValidator\n  });\n\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  if (!user.services || !user.services.password ||\n      !(user.services.password.bcrypt || user.services.password.srp))\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  if (!user.services.password.bcrypt) {\n    if (typeof options.password === \"string\") {\n      // The client has presented a plaintext password, and the user is\n      // not upgraded to bcrypt yet. We don't attempt to tell the client\n      // to upgrade to bcrypt, because it might be a standalone DDP\n      // client doesn't know how to do such a thing.\n      var verifier = user.services.password.srp;\n      var newVerifier = SRP.generateVerifier(options.password, {\n        identity: verifier.identity, salt: verifier.salt});\n\n      if (verifier.verifier !== newVerifier.verifier) {\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Incorrect password\")\n        };\n      }\n\n      return {userId: user._id};\n    } else {\n      // Tell the client to use the SRP upgrade process.\n      throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n        format: 'srp',\n        identity: user.services.password.srp.identity\n      }));\n    }\n  }\n\n  return checkPassword(\n    user,\n    options.password\n  );\n});\n\n// Handler to login using the SRP upgrade path. To use this login\n// handler, the client must provide:\n//   - srp: H(identity + \":\" + password)\n//   - password: a string or an object with properties 'digest' and 'algorithm'\n//\n// We use `options.srp` to verify that the client knows the correct\n// password without doing a full SRP flow. Once we've checked that, we\n// upgrade the user to bcrypt and remove the SRP information from the\n// user document.\n//\n// The client ends up using this login handler after trying the normal\n// login handler (above), which throws an error telling the client to\n// try the SRP upgrade path.\n//\n// XXX COMPAT WITH 0.8.1.3\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (!options.srp || !options.password)\n    return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    srp: String,\n    password: passwordValidator\n  });\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Check to see if another simultaneous login has already upgraded\n  // the user record to bcrypt.\n  if (user.services && user.services.password && user.services.password.bcrypt)\n    return checkPassword(user, options.password);\n\n  if (!(user.services && user.services.password && user.services.password.srp))\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  var v1 = user.services.password.srp.verifier;\n  var v2 = SRP.generateVerifier(\n    null,\n    {\n      hashedIdentityAndPassword: options.srp,\n      salt: user.services.password.srp.salt\n    }\n  ).verifier;\n  if (v1 !== v2)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Incorrect password\")\n    };\n\n  // Upgrade to bcrypt on successful login.\n  var salted = hashPassword(options.password);\n  Meteor.users.update(\n    user._id,\n    {\n      $unset: { 'services.password.srp': 1 },\n      $set: { 'services.password.bcrypt': salted }\n    }\n  );\n\n  return {userId: user._id};\n});\n\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername = function (userId, newUsername) {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  var oldUsername = user.username;\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n\n  Meteor.users.update({_id: user._id}, {$set: {username: newUsername}});\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id}, {$set: {username: oldUsername}});\n    throw ex;\n  }\n};\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\n//\n// XXX COMPAT WITH 0.8.1.3\n// Like the login method, if the user hasn't been upgraded from SRP to\n// bcrypt yet, then this method will throw an 'old password format'\n// error. The client should call the SRP upgrade login handler and then\n// retry this method again.\n//\n// UNLIKE the login method, there is no way to avoid getting SRP upgrade\n// errors thrown. The reasoning for this is that clients using this\n// method directly will need to be updated anyway because we no longer\n// support the SRP flow that they would have been doing to use this\n// method previously.\nMeteor.methods({changePassword: function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId)\n    throw new Meteor.Error(401, \"Must be logged in\");\n\n  var user = Meteor.users.findOne(this.userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  if (!user.services || !user.services.password ||\n      (!user.services.password.bcrypt && !user.services.password.srp))\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  if (! user.services.password.bcrypt) {\n    throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n      format: 'srp',\n      identity: user.services.password.srp.identity\n    }));\n  }\n\n  var result = checkPassword(user, oldPassword);\n  if (result.error)\n    throw result.error;\n\n  var hashed = hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  var currentToken = Accounts._getLoginToken(this.connection.id);\n  Meteor.users.update(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPassword = function (userId, newPlaintextPassword, options) {\n  options = _.extend({logout: true}, options);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  var update = {\n    $unset: {\n      'services.password.srp': 1, // XXX COMPAT WITH 0.8.1.3\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({_id: user._id}, update);\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: function (options) {\n  check(options, {email: String});\n\n  var user = Accounts.findUserByEmail(options.email);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  const emails = _.pluck(user.emails || [], 'address');\n  const caseSensitiveEmail = _.find(emails, email => {\n    return email.toLowerCase() === options.email.toLowerCase();\n  });\n\n  Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail = function (userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0])\n    email = user.emails[0].address;\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email))\n    throw new Error(\"No such email for user.\");\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when,\n    reason: 'reset'\n  };\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": tokenRecord\n  }});\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n\n  var resetPasswordUrl = Accounts.urls.resetPassword(token);\n\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.resetPassword.from\n      ? Accounts.emailTemplates.resetPassword.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.resetPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.resetPassword.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.resetPassword.text(user, resetPasswordUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.resetPassword.html === 'function')\n    options.html =\n      Accounts.emailTemplates.resetPassword.html(user, resetPasswordUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail = function (userId, email) {\n  // XXX refactor! This is basically identical to sendResetPasswordEmail.\n\n  // Make sure the user exists, and email is in their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0])\n    email = user.emails[0].address;\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email))\n    throw new Error(\"No such email for user.\");\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when,\n    reason: 'enroll'\n  };\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n\n  var enrollAccountUrl = Accounts.urls.enrollAccount(token);\n\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.enrollAccount.from\n      ? Accounts.emailTemplates.enrollAccount.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.enrollAccount.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.enrollAccount.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.enrollAccount.text(user, enrollAccountUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.enrollAccount.html === 'function')\n    options.html =\n      Accounts.emailTemplates.enrollAccount.html(user, enrollAccountUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: function (token, newPassword) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"resetPassword\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n      check(newPassword, passwordValidator);\n\n      var user = Meteor.users.findOne({\n        \"services.password.reset.token\": token});\n      if (!user)\n        throw new Meteor.Error(403, \"Token expired\");\n      var when = user.services.password.reset.when;\n      var reason = user.services.password.reset.reason;\n      var tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n      if (reason === \"enroll\") {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n      var currentTimeMs = Date.now();\n      if ((currentTimeMs - when) > tokenLifetimeMs)\n        throw new Meteor.Error(403, \"Token expired\");\n      var email = user.services.password.reset.email;\n      if (!_.include(_.pluck(user.emails || [], 'address'), email))\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Token has invalid email address\")\n        };\n\n      var hashed = hashPassword(newPassword);\n\n      // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n      var oldToken = Accounts._getLoginToken(self.connection.id);\n      Accounts._setLoginToken(user._id, self.connection, null);\n      var resetToOldToken = function () {\n        Accounts._setLoginToken(user._id, self.connection, oldToken);\n      };\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        var affectedRecords = Meteor.users.update(\n          {\n            _id: user._id,\n            'emails.address': email,\n            'services.password.reset.token': token\n          },\n          {$set: {'services.password.bcrypt': hashed,\n                  'emails.$.verified': true},\n           $unset: {'services.password.reset': 1,\n                    'services.password.srp': 1}});\n        if (affectedRecords !== 1)\n          return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Invalid email\")\n          };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      }\n\n      // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first unverified address if we weren't passed an address.\n  if (!address) {\n    var email = _.find(user.emails || [],\n                       function (e) { return !e.verified; });\n    address = (email || {}).address;\n\n    if (!address) {\n      throw new Error(\"That user has no unverified email addresses.\");\n    }\n  }\n  // make sure we have a valid address\n  if (!address || !_.contains(_.pluck(user.emails || [], 'address'), address))\n    throw new Error(\"No such email address for user.\");\n\n\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()};\n  Meteor.users.update(\n    {_id: userId},\n    {$push: {'services.email.verificationTokens': tokenRecord}});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  var verifyEmailUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.verifyEmail.from\n      ? Accounts.emailTemplates.verifyEmail.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.verifyEmail.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.verifyEmail.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.verifyEmail.text(user, verifyEmailUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.verifyEmail.html === 'function')\n    options.html =\n      Accounts.emailTemplates.verifyEmail.html(user, verifyEmailUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: function (token) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"verifyEmail\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n\n      var user = Meteor.users.findOne(\n        {'services.email.verificationTokens.token': token});\n      if (!user)\n        throw new Meteor.Error(403, \"Verify email link expired\");\n\n      var tokenRecord = _.find(user.services.email.verificationTokens,\n                               function (t) {\n                                 return t.token == token;\n                               });\n      if (!tokenRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link expired\")\n        };\n\n      var emailsRecord = _.find(user.emails, function (e) {\n        return e.address == tokenRecord.address;\n      });\n      if (!emailsRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n        };\n\n      // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n      Meteor.users.update(\n        {_id: user._id,\n         'emails.address': tokenRecord.address},\n        {$set: {'emails.$.verified': true},\n         $pull: {'services.email.verificationTokens': {address: tokenRecord.address}}});\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmail = function (userId, newEmail, verified) {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (_.isUndefined(verified)) {\n    verified = false;\n  }\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  var caseInsensitiveRegExp =\n    new RegExp('^' + Meteor._escapeRegExp(newEmail) + '$', 'i');\n\n  var didUpdateOwnEmail = _.any(user.emails, function(email, index) {\n    if (caseInsensitiveRegExp.test(email.address)) {\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': email.address\n      }, {$set: {\n        'emails.$.address': newEmail,\n        'emails.$.verified': verified\n      }});\n      return true;\n    }\n\n    return false;\n  });\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  });\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id},\n      {$pull: {emails: {address: newEmail}}});\n    throw ex;\n  }\n}\n\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail = function (userId, email) {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Meteor.users.update({_id: user._id},\n    {$pull: {emails: {address: email}}});\n}\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nvar createUser = function (options) {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n\n  var username = options.username;\n  var email = options.email;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  var user = {services: {}};\n  if (options.password) {\n    var hashed = hashPassword(options.password);\n    user.services.password = { bcrypt: hashed };\n  }\n\n  if (username)\n    user.username = username;\n  if (email)\n    user.emails = [{address: email, verified: false}];\n\n  // Perform a case insensitive check before insert\n  checkForCaseInsensitiveDuplicates('username', 'Username', username);\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n  var userId = Accounts.insertUserDoc(options, user);\n  // Perform another check after insert, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n  } catch (ex) {\n    // Remove inserted user if the check fails\n    Meteor.users.remove(userId);\n    throw ex;\n  }\n  return userId;\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: function (options) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"createUser\",\n    arguments,\n    \"password\",\n    function () {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation)\n        return {\n          error: new Meteor.Error(403, \"Signups forbidden\")\n        };\n\n      // Create user. result contains id and token.\n      var userId = createUser(options);\n      // safety belt. createUser is supposed to throw on error. send 500 error\n      // instead of sending a verification email with empty userid.\n      if (! userId)\n        throw new Error(\"createUser failed to insert new user\");\n\n      // If `Accounts._options.sendVerificationEmail` is set, register\n      // a token to verify the user's primary email, and send it to\n      // that address.\n      if (options.email && Accounts._options.sendVerificationEmail)\n        Accounts.sendVerificationEmail(userId, options.email);\n\n      // client gets logged in as the new user afterwards.\n      return {userId: userId};\n    }\n  );\n}});\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options);\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users._ensureIndex('services.email.verificationTokens.token',\n                          {unique: 1, sparse: 1});\nMeteor.users._ensureIndex('services.password.reset.token',\n                          {unique: 1, sparse: 1});\nMeteor.users._ensureIndex('services.password.reset.when',\n                          {sparse: 1});\n"]}